basePath: /
definitions:
  database.CreateEventDTO:
    properties:
      capacity:
        description: Total capacity of the event
        minimum: 1
        type: integer
      description:
        description: Event description
        type: string
      event_details:
        $ref: '#/definitions/database.EventDetailsStruct'
      name:
        description: Event name
        maxLength: 255
        minLength: 3
        type: string
    required:
    - capacity
    - description
    - name
    type: object
  database.Event:
    properties:
      capacity:
        description: Total capacity of the event
        type: integer
      description:
        description: Event description
        type: string
      event_details:
        allOf:
        - $ref: '#/definitions/database.EventDetailsStruct'
        description: Additional event details (not stored in DB)
      eventID:
        description: Unique event identifier
        type: string
      name:
        description: Name of the event
        type: string
      tickets:
        description: Associated tickets
        items:
          $ref: '#/definitions/database.Ticket'
        type: array
      user_id:
        type: string
    type: object
  database.EventDetailsStruct:
    properties:
      details:
        additionalProperties: true
        type: object
    type: object
  database.LoginDTO:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  database.SignUpDTO:
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      password:
        type: string
      phoneNumber:
        type: string
    type: object
  database.Ticket:
    properties:
      email:
        description: Email of the ticket holder
        type: string
      event:
        allOf:
        - $ref: '#/definitions/database.Event'
        description: Relationship with Event
      event_id:
        description: ID of the event associated with the ticket
        type: string
      quantity:
        type: integer
      ticketID:
        description: Unique ticket ID
        type: string
      user_id:
        description: Number of tickets booked
        type: string
    type: object
  database.TicketBookingReq:
    properties:
      email:
        description: Email of the ticket holder
        type: string
      event_id:
        description: ID of the event to book
        type: string
      quantity:
        description: Number of tickets to book
        minimum: 1
        type: integer
    required:
    - email
    - event_id
    - quantity
    type: object
host: 127.0.0.1:8080
info:
  contact: {}
  description: This is a sample Ticket-Booking API server for a Fiber app.
  title: Ticket-Booking API
  version: "1.0"
paths:
  /events:
    post:
      consumes:
      - application/json
      description: Create a new event with name, description, and capacity
      parameters:
      - description: Event Data
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/database.CreateEventDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/database.Event'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new event
      tags:
      - events
  /events/{id}:
    delete:
      description: Delete an event by event ID
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete an event
      tags:
      - events
    get:
      consumes:
      - application/json
      description: Retrieve an event's details by its unique event ID
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Event'
        "404":
          description: Event not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get an event by ID
      tags:
      - events
    put:
      consumes:
      - application/json
      description: Update an event's name, description, and capacity by event ID
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated Event Data
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/database.CreateEventDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Event'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update an event
      tags:
      - events
  /tickets:
    post:
      consumes:
      - application/json
      description: Book a ticket for an event
      parameters:
      - description: Ticket Booking Request
        in: body
        name: ticket
        required: true
        schema:
          $ref: '#/definitions/database.TicketBookingReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/database.Ticket'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Book a ticket
      tags:
      - tickets
  /users/login:
    post:
      consumes:
      - application/json
      description: This endpoint allows users to log in with their email and password.
      parameters:
      - description: User login details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/database.LoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful with token
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Validation failed
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Incorrect password
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Error generating token
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User login
      tags:
      - Users
  /users/register:
    post:
      consumes:
      - application/json
      description: This endpoint allows users to register with their details.
      parameters:
      - description: User registration details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/database.SignUpDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Registration successful
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Validation failed
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User registration
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
